###Посимвольное двоичное обазование
##1(). Автомат обрабатывает натуральное число N (128 ≤ N ≤ 255) по следующему алгоритму:
# 1.Строится восьмибитная двоичная запись числа N.
# 2.Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3.Полученное число переводится в десятичную запись.
# 4.Из исходного числа вычитается полученное, разность выводится на экран.
# Пример. Дано число N = 131. Алгоритм работает следующим образом:
# 1.Восьмибитная двоичная запись числа N: 10000011.
# 2.Все цифры заменяются на противоположные, новая запись: 01111100.
# 3.Десятичное значение полученного числа: 124.
# 4.На экран выводится число: 131 – 124 = 7.
# Какое число нужно ввести в автомат, чтобы в результате получилось 185?
#for n in range(128, 256):
#    s = bin(n)[2:]  # перевод в двоичную систему и обрезание ненужных b0
#    s = str(s)
#    s = s.replace('1', '*')
#    s = s.replace('0', '1')
#    s = s.replace('*', '0')
#    r = int(s, 2)  # перевод в десятичную систему
#    if n - r == 185:
#        print(n)

##4. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1)Строится двоичная запись числа N.
# 2)К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи числа N, и остаток от деления суммы на 2 дописывается в конец числа
# (справа). Например, запись 11100 преобразуется в запись 111001;
# б) над этой записью производятся те же действия – справа дописывается остаток от деления суммы её цифр на 2.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N)
# является двоичной записью искомого числа R.
# Укажите минимальное число R, которое превышает число 83 и может являться результатом работы данного алгоритма.
# В ответе это число запишите в десятичной системе счисления.
#def f(s):
#    summa = 0
#    for i in range(len(s)):
#        summa += int(s[i])
#    return summa
#for n in range(1, 100):
#    s = bin(n)[2:]  # перевод в двоичную систему
#    s = str(s)
#    summa = f(s)
#    s = s + str(summa % 2)
#    summa = f(s)
#    s = s + str(summa % 2)
#    r = int(s, 2)  # перевод в десятичную систему
#    if r > 83:
#        print(r)
#        break

##8. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
# 1.Строится двоичная запись числа N.
# 2.К этой записи дописываются справа ещё два разряда по следующему правилу: если N чётное, в конец числа (справа)
# дописываются два нуля, в противном случае справа дописываются две единицы. Например, двоичная запись
# 1001 числа 9 будет преобразована в 100111.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N)
# является двоичной записью числа – результата работы данного алгоритма.
# Укажите минимальное число N, для которого результат работы алгоритма будет больше 115. В ответе это число
# запишите в десятичной системе счисления.
#for n in range(1, 100):
#    s = bin(n)[2:]  # перевод в двоичную систему
#    s = str(s)
#    if n % 2 == 0:
#        s += "00"
#    else:
#        s += "11"
#    r = int(s, 2)  # перевод в десятичную систему
#    if r > 115:
#        print(n)
#        break

##12. Автомат обрабатывает натуральное число N > 1 по следующему алгоритму.
# 1.Строится двоичная запись числа N.
# 2.Последняя цифра двоичной записи удаляется.
# 3.Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, если чётным— 01.
# 4.Результат переводится в десятичную систему и выводится на экран.
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
# 1.Двоичная запись числа N: 1101.
# 2.Удаляется последняя цифра, новая запись: 110.
# 3.Исходное число нечётно, дописываются цифры 10, новая запись: 11010.
# 4.На экран выводится число 26.
# Какое число нужно ввести в автомат, чтобы в результате получилось 2018?
#for n in range(1, 100000):
#    s = bin(n)[2:]
#    s = str(s)
#    s = s[:-1]
#    if n % 2 != 0:
#        s += '10'
#    else:
#        s += '01'
#    r = int(s, 2)
#    if r == 2018:
#        print(n)

##14. Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
# 1.Строится восьмибитная двоичная запись числа N.
# 2.Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3.Полученное число переводится в десятичную запись.
# 4.Из нового числа вычитается исходное, полученная разность выводится на экран.
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
# 1.Восьмибитная двоичная запись числа N: 00001101.
# 2.Все цифры заменяются на противоположные, новая запись 11110010.
# 3.Десятичное значение полученного числа 242.
# 4.На экран выводится число 242 − 13 = 229.
# Какое число нужно ввести в автомат, чтобы в результате получилось 133?
#for n in range(256):
#    s = bin(n)[2:]  # перевод в двоичную систему
#    s = str(s)
#    if len(s) < 8:
#        s = '0' * (8 - len(s)) + s
#    s = s.replace('1', '*')
#    s = s.replace('0', '1')
#    s = s.replace('*', '0')
#    s = int(s, 2)  # перевод в десятичную систему
#    if s - n == 133:
#        print(n)

##15. Автомат обрабатывает натуральное число N (0 ≤ N ≤ 255) по следующему алгоритму:
# 1.Строится восьмибитная двоичная запись числа N.
# 2.Все цифры двоичной записи заменяются на противоположные (0 на 1, 1 на 0).
# 3.Полученное число переводится в десятичную запись.
# 4.Из нового числа вычитается исходное, полученная разность выводится на экран.
# Пример. Дано число N = 13. Алгоритм работает следующим образом.
# 1.Восьмибитная двоичная запись числа N: 00001101.
# 2.Все цифры заменяются на противоположные, новая запись 11110010.
# 3.Десятичное значение полученного числа 242.
# 4.На экран выводится число 242 − 13 = 229.
# Какое число нужно ввести в автомат, чтобы в результате получилось 111?
#for n in range(256):
#    s = bin(n)[2:]
#    s = str(s)
#    s.replace('1', '%')
#    s.replace('0', '1')
#    s.replace('%', '0')
#    s = int(s, 2)
#    if s - n == 111:
#        print(n)#хз поч не работает

##16. Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1.Строится двоичная запись числа N.
# 2.Удаляется первая слева единица и все следующие непосредственно за ней нули. Если после этого в числе
# не остаётся цифр, результат этого действия считается равным нулю.
# 3.Полученное число переводится в десятичную запись.
# 4.Новое число вычитается из исходного, полученная разность выводится на экран.
# Пример. Дано число N = 11. Алгоритм работает следующим образом.
# 1.Двоичная запись числа N: 1011.
# 2.Удаляется первая единица и следующий за ней ноль: 11.
# 3.Десятичное значение полученного числа 3.
# 4.На экран выводится число 11 – 3 = 8.
# Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел
# от 100 до 3000?
#a = []
#for n in range(100, 3001):
#    s = int(bin(n)[3:], 2)
#    if s - n not in a:
#        a.append(s-n)
#print(len(a))

##23. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1.Строится двоичная запись числа N.
# 2.К этой записи дописываются справа ещё два разряда по следующему правилу:
# а)складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# Например, запись 11100 преобразуется в запись 111001;
# б)над этой записью производятся те же действия— справа дописывается остаток от деления суммы цифр на 2.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной
# записью искомого числа R.
# Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число, большее,
# чем 85. В ответе запишите это число в десятичной системе счисления.
#for n in range(1, 1000):
#    s = bin(n)[2:]
#    if s.count('1') % 2 == 0:
#        s += '0'
#    else:
#        s += '1'
#    if s.count('1') % 2 == 0:
#        s += '0'
#    else:
#        s += '1'
#    s = int(s, 2)
#    if s > 85:
#        print(n)
#        break#пиздец тупо, но я сделала это САМА


#27. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
# 1)Строится двоичная запись числа N.
# 2)К этой записи дописываются справа ещё два разряда по следующему правилу: если N чётное, в конец числа (справа)
# дописываются два нуля, в противном случае справа дописываются две единицы. Например, двоичная запись 1001 числа 9
# будет преобразована в 100111.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной
# записью числа— результата работы данного алгоритма.
# Укажите минимальное число N, для которого результат работы алгоритма будет больше 134. В ответе это число запишите
# в десятичной системе счисления.
# for n in range(1, 100):
#     d = bin(n)[2:]
#     d = str(d)
#     if n % 2 == 0:
#         d += '00'
#     else:
#         d += '11'
#     if int(d, 2) > 134:
#         print(n)
#         break


#   30. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1)Строится двоичная запись числа N.
# 2)К этой записи дописываются разряды по следующему правилу:
# а)если число четное, то к двоичной записи числа в конце дописываются 1 и 0;
# б)если число нечетное, то к двоичной записи числа в конце дописывается 01.
# Полученная таким образом запись является двоичной записью искомого числа R. Укажите наибольшее число R
# меньшее 109, которое может получиться после обработки этого алгоритма. В ответе это число запишите в
# десятичной системе.
# for n in range(1,1000):
#     d = bin(n)[2:]
#     if int(d) % 2 == 0:
#         d += '10'
#     else:
#         d += '01'
#     r = int(d, 2)
#     if r <109:
#         print(r)




#34. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1.Строится двоичная запись числа N.
# 2.К этой записи дописываются справа ещё два разряда по следующему правилу:
# а)складываются все цифры двоичной записи числа N, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# Например, запись 11100 преобразуется в запись 111001;
# б)над этой записью производятся те же действия— справа дописывается остаток от деления суммы её цифр на 2.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной
# записью искомого числа R. Укажите такое наименьшее число N, для которого результат работы данного алгоритма больше
# числа 77. В ответе это число запишите в десятичной системе счисления.
# for n in range(1, 1000):
#     d = bin(n)[2:]
#     for i in range(2):
#         if d.count('1') % 2 == 0:
#             d += '0'
#         else:
#             d += '1'
#     r = int(d, 2)
#     if r > 77:
#         print(n)
#         break


#45. Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
# 1.Строится двоичная запись числа N.
# 2.Вместо последней (самой правой) двоичной цифры дважды записывается вторая слева цифра двоичной записи.
# 3.Результат переводится в десятичную систему.
# Пример. Дано число N=19. Алгоритм работает следующим образом:
# 1.Двоичная запись числа N: 10011.
# 2.Вторая слева цифра 0, единица в конце записи заменяется на два нуля, новая запись 100100.
# 3.Результат работы алгоритма R=36.
# При каком наименьшем числе N в результате работы алгоритма получится R>92?
# В ответе запишите это число в десятичной системе счисления.

# for n in range(1, 100):
#     s = bin(n)[2:]  # перевод в двоичную систему
#     s = str(s)
#     s = s[0:len(s)-1]
#     s += s[1] * 2
#     r = int(s, 2)  # перевод в десятичную систему
#     if r > 92:
#         print(n)
#         break

#50.   Автомат обрабатывает натуральное число N по следующему алгоритму.
# 1.Строится двоичная запись числа N.
# 2.Если N четное, то в конец полученной записи (справа) дописывается 0, в начало— 1;
# если N— нечётное в конец и начало дописывается по две единицы.
# 3.Результат переводится в десятичную систему и выводится на экран.
# Пример. Дано число N=13. Алгоритм работает следующим образом:
# 1.Двоичная запись числа N: 1101.w
# 2.Число нечетное, следовательно, по две единицы по краям— 11110111.
# 3.На экран выводится число 247.
# Укажите наименьшее число, большее 52, которое может является результатом работы автомата.
# a = []
# for n in range(1,100):
#     d = bin(n)[2:]
#     d = str(d)
#     if n % 2 == 0:
#         d = '1' + d +'0'
#     else:
#         d = '11' + d + '11'
#     r = int(d, 2)
#     if r > 52:
#         a.append(r)
# print(min(a))


#56.Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
# 1.Строится двоичная запись числа N.
# 2.В полученной записи все нули заменяются на единицы, все единицы— на нули. Из полученного числа удаляются
# ведущие нули.
# 3.Результат переводится в десятичную систему счисления.
# 4.Результатом работы алгоритма становится разность исходного числа N и числа, полученного
# на предыдущем шаге.
# Пример. Дано число N=22. Алгоритм работает следующим образом:
# 1.Строим двоичную запись: 2210=101102.
# 2.Заменяем цифры и удаляем ведущие нули: 10110→01001→1001.
# 3.Переводим в десятичную систему: 10012=910.
# 4.Вычисляем разность: 22−9=13.
# Результат работы алгоритма R=13.
# a = []
# for n in range(1, 10000):
#     d = bin(n)[2:]
#     s = str(d)
#     s = s.replace('0', '2')
#     s = s.replace('1', '0')
#     s = s.replace('2', '1')
#     s.strip('0')
#     s1 = int(s, 2)
#     if n-s1 == 979:
#         print(n)
#         break


#   61. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1.Строится двоичная запись числа N.
# 2.Далее эта запись обрабатывается по следующему правилу:
# а)если число N делится на 3, то в этой записи дописываются справа три последние двоичные цифры;
# 6)если число N на 3 не делится, то остаток от деления умножается на 3, переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3.Результат переводится в десятичную систему и выводится на экран.
# Например, для исходного числа 12=11002, результатом является число 11001002=100, а для исходного числа 4=1002 результатом является
# число 100112=19.
# Укажите максимальное число R, не превышающее 137, которое может быть получено с помощью описанного алгоритма.
# # В ответе запишите это число в десятичной системе счисления.
# for n in range(1000, 0, -1):
#     s = bin(n)[2:]
#     if n % 3 == 0:
#         s += bin(n)[-3:]
#     else:
#         s += bin((n%3)*3)[2:]
#     r = int(s,2)
#     if r < 137:
#         print(n)
#         break

# ch = 0
# ne = 0
# for n in range(1, 1000):
#     d = bin(n)[2:]
#     for i in range(n):
#         n = str(n)
#         if n[i] % 2 == 0:
#             ch += 1
#         elif n[i] % 2 == 1:
#             ne+=1
#         if ch == ne and ch+ne % 2 == 0:
#             d += 1
#         elif ch == ne and ch + ne % 2 == 1:
#             d += 0
#         if ch > ne:
#             d += 1
#         elif ch < ne:
#             d += 0
#         #n = int(n)
# print(int(d, 2))



#Посимвольное десятичное преобразование
##1. Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам.
# 1.Складываются первая и вторая, а также вторая и третья цифры исходного числа.
# 2.Полученные два числа записываются друг за другом в порядке убывания (без разделителей).
# Пример. Исходное число: 348. Суммы: 3 + 4 = 7; 4 + 8 = 12. Результат: 127. Укажите наименьшее число,
# в результате обработки которого автомат выдаст число 1412.
#for i in range(100, 1000):
#    s = str(i)
#    k1 = int(s[0]) + int(s[1])
#    k2 = int(s[1]) + int(s[2])
#    a = str(max(k1, k2))
#    b = str((min(k1, k2)))
#    c = a + b
#    if c == '1412':
#        print(i)
#        break

#   Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
# 1.Строится двоичная запись числа N.
# 2.Вычисляется количество единиц, стоящих на чётных местах в двоичной записи числа N без ведущих нулей, и количество нулей, стоящих на
# нечётных местах. Места отсчитываются слева направо (от старших разрядов к младшим, начиная с единицы).
# 3.Результатом работы алгоритма становится модуль разности полученных двух чисел.
# Пример. Дано число N=39. Алгоритм работает следующим образом:
# 1.Строится двоичная запись: 3910=1001112.
# 2.Выделяем единицы на чётных и нули на нечётных местах: 100111. На чётных местах стоят две единицы, на нечётных— один ноль.
# 3.Модуль разности равен 1.
# Результат работы алгоритма R=1.
# При каком наименьшем N в результате работы алгоритма получится R=5?
# for n in range(2, 10000):
#     s = bin(n)[2:]  # перевод в двоичную систему
#     s = str(s)
#     sum_one = 0
#     sum_zero = 0
#     for i in range(len(s)):
#         if i % 2 != 0 and s[i] == "1":
#             sum_one += 1
#         elif i % 2 == 0 and s[i] == "0":
#             sum_zero += 1
#     if abs(sum_one - sum_zero) == 5:
#         print(n)
#         break

#   Автомат обрабатывает натуральное число N по следующему алгоритму:
# 1.Строится двоичная запись числа N.
# 2.В конец двоичной записи добавляются две первые цифры этой записи в обратном порядке.
# 3.Результат переводится в десятичную систему и выводится на экран.
# Пример.Дано число N=11. Алгоритм работает следующим образом:
# 1.Двоичная запись числа N: 1011.
# 2.В конец записи добавляются цифры 01— первые две цифры в обратном порядке (сначала вторая, затем первая), получается 101101.
# 3.На экран выводится число 45.
# При каком наименьшем исходном N результат на экране автомата будет больше 74?
# for n in range(2, 100):
#     s = bin(n)[2:]  # перевод в двоичную систему
#     s = str(s)
#     s += s[1] + s[0]
#     if int(s, 2) > 74:
#         print(n)

#   Алгоритм получает на вход натуральное число N>1 и строит по нему новое число R следующим образом:
# 1.Строится двоичная запись числа N.
# 2.Подсчитывается количество нулей и единиц в полученной записи. Если их количество одинаково, в конец записи добавляется её
# последняя цифра. В противном случае в конец записи добавляется та цифра, которая встречается реже.
# 3.Шаг 2 повторяется ещё два раза
# 4.Результат переводится в десятичную систему.
# Пример. Дано число N=19. Алгоритм работает следующим образом:
# 1.Двоичная запись числа N: 10011.
# 2.В полученной записи нулей меньше, чем единиц, в конец записи добавляется 0. Новая запись: 100110.
# 3.В текущей записи нулей и единиц поровну, в конец записывается последняя цифра, это 0. Получается 1001100.
# В этой записи единиц меньше, в конец добавляется 1: 10011001.
# 4.Результат работы алгоритма R=153.
# При каком наименьшем числе N>104в результате работы алгоритма получится число, кратное 4?
# for n in range(105, 1000):
#     s = bin(n)[2:] # перевод в двоичную систему
#     s = str(s)
#     for i in range(3):
#         if s.count("1") == s.count("0"):
#             s += s[-1]
#         elif s.count("1") > s.count("0"):
#             s += "0"
#         else:
#             s += "1"
#     r = int(s, 2) # перевод в десятичную систему
#     if r % 4 == 0:
#         print(n)
#         break

#   Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
# 1.Строится двоичная запись числа N.
# 2.В полученной записи все нули заменяются на единицы, все единицы— на нули. Из полученного числа удаляются ведущие нули.
# 3.Результат переводится в десятичную систему счисления.
# 4.Результатом работы алгоритма становится разность исходного числа N и числа, полученного на предыдущем шаге.
#При каком наименьшем N в результате работы алгоритма получится R=999?
# for n in range(2, 10000):
#     s = bin(n)[2:]
#     s = str(s)
#     s = s.replace('1', '*')
#     s = s.replace('0', '1')
#     s = s.replace('*', '0')
#     s.strip('0')
#     if n-int(s,2) == 999:
#         print(n) #УРААААААА



##58!
# for n in range(999, 10000):
#     n = str()
#     n1 = n[0:2]
#     print(n1)
#     n2 = n[2:4]
#     print(n2)
#     if n1>n2:
#         s = str(n1 + n2)
#     else:
#         s = str(n2+n1)
# if s == 1412:
#     print(n)

##97
# for n in range(1, 1000):
#     r = bin(n)[2:]
#     if r.count('1') % 2 == 0:
#         r = r + '0'
#     else:
#         r = r + '1'
#     if r.count('1') % 2 == 0:
#         r = r + '0'
#     else:
#         r = r + '1'
#     if int(r, 2) > 180:
#         print(int(r, 2))
#         break

##144
# for n in range(1, 1000):
#     r = bin(n)[2:]
#     if n % 2 == 0:
#         r += '00'
#     else:
#         r += '11'
#     if int(r, 2) > 115:
#         print(n)
#         break

##168
# for n in range(501, 1000):
#     r = bin(n)[2:]
#     r1 = r[::-1]
#     if int(r1, 2) == 15:
#         print(n)

##178!
# r = bin(95)[2:]
# while len(r)<8:
#     r ='0' + r
# r = r.replace('1', '*')
# r = r.replace('0', '1')
# r = r.replace('*', '0')
# r = int(r, 2) + 1
# print(r)

##195!
# for n in range(1, 1000):
#     n = str(bin(n)[2:])
#     n1 = n.count('1')
#     n = int()
#     n += n1 % 2
#     n += n1 % 2
#     #n1 = int(n1, 2)
#     if n < 50:
#         print(n)

##207
#for n in range(1, 101):
#     r = bin(n)[2:]
#     for i in range(2):
#         t = r.count('1')
#         r = int(bin(r)) + t % 2
#         r = str()
#     y = [int(r, 2)]
# print(len(y))

# for n in range(10, 1000):
#     b = str(oct(n)[2:])
#     if n % 5 == 0:
#         f = b + b[:2]
#     else:
#         g = bin(n % 5)[2:]
#         f = b + g
#     if int(f, 8) >= 35000:
#         print(n)
#         break

# for n in range(1, 1000):
#     r = bin(n)[2:]
#     print(r)
#     r += r[-1]
#     print(r)
#     r = str(r)
#     for u in range(2):
#         if r.count('1') % 2 == 0:
#             r += '0'
#             print(r)
#         else:
#             r += '1'
#             print(r)
#     if int(r, 2) > 114:
#         print(int(r, 2))
#         break

# for n in range(10, 1000):
#     r = str(bin(n)[2:])
#     sp2 = r[-2]
#     sl2 = r[1]
#     r += sp2 + sl2
#     itog = int(r, 2)
#     if itog <= 190:
#         print(n)

