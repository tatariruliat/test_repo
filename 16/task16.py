# Последовательность чисел Фибоначчи задается рекуррентным соотношением:
# F(1) = 1
# F(2) = 1
# F(n) = F(n–2) + F(n–1), при n >2, где n – натуральное число.
# Чему равно девятое число в последовательности Фибоначчи?
# def f(n):
#     if n == 1 or n == 2:
#         return 1
#     elif n > 2:
#         return f(n - 2) + f(n - 1)
# print(f(9))

#17)Алгоритм вычисления функции F(n) задан следующими соотношениями:
# 		F(n) = n + 3 при n < 3
# 		F(n) = (n + 2)·F(n–4), если n ≥ 3 и делится на 3,
# 		F(n) = n + F(n–1) + 2·F(n–2), если n ≥ 3 и не делится на 3.
# Чему равно значение функции F(20)?
# def f(n):
#     if n < 3:
#         return n + 3
#     if n >= 3:
#         if n % 3 == 0:
#             return (n + 2) * f(n - 2)
#         else:
#             return n + f(n - 1) + f(n - 2)
# print(f(20))

# 22)	Определите, сколько символов * выведет эта процедура при вызове F(35):
#   Python
# def F( n ):
#   print('*')
#   if n >= 1:
#     print('*')
#     F(n-1)
#     F(n-2)
#     print('*')
# def f(n):
#     global k
#     k += 1
#     if n >= 1:
#         k+=1
#         return f(n-1)
#         return f(n-1)
#         k+=1
# k = 0
# f(35)
# print(k)

#   56)	Алгоритм вычисления функции F(n) задан следующими соотношениями:
# 		F(n) =  n · n · n + n при n > 20
# 		F(n) = 3 · F(n+1) + F(n+3), при чётных n <= 20
# 		F(n) = F(n+2) + 2 · F(n+3), при нечётных n <= 20
# Определите количество натуральных значений n из отрезка [1; 1000], при которых значение F(n) не содержит цифру 1.
# def f(n):
#     if n > 20:
#         return n*n*n + n
#     elif n <= 20:
#         if n % 2 == 0:
#             return 3 * f(n+1) + f(n+3)
#         else:
#             return f(n+2) + 2 * f(n + 3)
# def fail(y):
#     s = str(y)
#     return not '1' in s
# coint = 0
# for x in range(1, 1000):
#     if fail(f(x)):
#         coint+=1
#         print(coint)

#   63)	Алгоритм вычисления функции F(n) задан следующими соотношениями:
# 		F(n) =  n · n · n +  n · n + 1, при n <= 13
# 		F(n) = F(n–1) + 2 · n · n – 3, при n > 13, кратных 3
# 		F(n) = F(n–2) + 3 · n + 6, при n > 13, не кратных 3
# Определите количество натуральных значений n из отрезка [1; 1000], для которых все цифры значения F(n) нечётные.
# def f(n):
#     if n <= 13:
#         return n*n*n + n*n +1
#     else:
#         if n % 3 == 0:
#             return f(n-1) +2 *n*n -3
#         else:
#             return f(n-2) + 3*n+6
# def ne(y):
#     s1 = 1
#     s = str(y)
#     for i in len(s):
#         if i % 2 != 0:
#             return s1
#         else:
#             s1 = 0
#     if s == 1:
#         return s
# cnt = 0
# for x in range(1, 1000):
#     if ne(f(x)):
#         cnt+=1
#         print(cnt)

#   F(n) = n + 1 при n ≤ 2;
# F(n) = F(n− 1) + 2·F(n − 2) при n > 2.
# def F(n):
#     if n <= 2:
#         return n+1
#     else:
#         return F(n-1) + 2*F(n - 2)
# print(F(4))

print(int('1010000', 2))